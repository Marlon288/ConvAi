import { CloseVectorEmbeddings } from './embeddings';
import { CloseVectorDocument } from './document';
import { CloseVectorCredentials } from './credentials';
export type AddDocumentOptions = Record<string, any>;
export declare abstract class CloseVectorSaveableVectorStore {
    FilterType: object | string;
    embeddings: CloseVectorEmbeddings;
    credentials?: CloseVectorCredentials;
    constructor(embeddings: CloseVectorEmbeddings, credentials?: CloseVectorCredentials);
    abstract save(directory: string): Promise<void>;
    static load(_directory: string, _embeddings: CloseVectorEmbeddings): Promise<CloseVectorSaveableVectorStore>;
    abstract addVectors(vectors: number[][], documents: CloseVectorDocument[], options?: AddDocumentOptions): Promise<string[] | void>;
    abstract addDocuments(documents: CloseVectorDocument[], options?: AddDocumentOptions): Promise<string[] | void>;
    delete(_params?: Record<string, any>): Promise<void>;
    abstract similaritySearchVectorWithScore(query: number[], k: number, filter?: this['FilterType']): Promise<[CloseVectorDocument, number][]>;
    similaritySearch(query: string, k?: number, filter?: this['FilterType'] | undefined): Promise<CloseVectorDocument[]>;
    similaritySearchWithScore(query: string, k?: number, filter?: this['FilterType'] | undefined): Promise<[CloseVectorDocument, number][]>;
}
