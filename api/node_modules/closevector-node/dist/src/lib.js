"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createGetFileOperationUrl = exports.createUploadFileOperationUrl = exports.encryptToken = exports.chunkArray = exports.FileVisibility = exports.END_POINT = void 0;
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken")); // you can also use any other JWT library, for example: jsonwebtoken
const axios_1 = __importDefault(require("axios"));
exports.END_POINT = "https://vector-kv.mega-ug.uk";
var FileVisibility;
(function (FileVisibility) {
    FileVisibility[FileVisibility["Public"] = 0] = "Public";
    FileVisibility[FileVisibility["Private"] = 1] = "Private";
})(FileVisibility || (exports.FileVisibility = FileVisibility = {}));
const chunkArray = (arr, chunkSize) => arr.reduce((chunks, elem, index) => {
    const chunkIndex = Math.floor(index / chunkSize);
    const chunk = chunks[chunkIndex] || [];
    // eslint-disable-next-line no-param-reassign
    chunks[chunkIndex] = chunk.concat([elem]);
    return chunks;
}, []);
exports.chunkArray = chunkArray;
function encryptToken(object, secret) {
    return __awaiter(this, void 0, void 0, function* () {
        const token = yield jsonwebtoken_1.default.sign(Object.assign(Object.assign({}, object), { iat: Date.now(), exp: Math.floor((Date.now() + 60 * 60 * 1000) / 1000) }), secret);
        return token;
    });
}
exports.encryptToken = encryptToken;
function createUploadFileOperationUrl(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { accessKey, secret } = options;
        const config = {
            method: 'POST',
            url: `${exports.END_POINT}/file/url`,
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${accessKey}:${yield encryptToken({ accessKey }, secret)}`,
            },
            data: {
                uuid: options.uuid,
                description: options.description,
                visibility: options.public ? FileVisibility.Public : FileVisibility.Private
            }
        };
        const response = yield (0, axios_1.default)(config);
        return response.data;
    });
}
exports.createUploadFileOperationUrl = createUploadFileOperationUrl;
function createGetFileOperationUrl(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { accessKey, secret, uuid } = options;
        const config = {
            method: 'GET',
            url: `${exports.END_POINT}/file/url/${uuid}`,
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${accessKey}:${yield encryptToken({ accessKey }, secret)}`,
            }
        };
        const response = yield (0, axios_1.default)(config);
        return response.data;
    });
}
exports.createGetFileOperationUrl = createGetFileOperationUrl;
//# sourceMappingURL=lib.js.map