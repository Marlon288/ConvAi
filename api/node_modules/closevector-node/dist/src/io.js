"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIndex = exports.upsertIndex = exports.uploadOrUpdateIndexFile = void 0;
const lib_1 = require("./lib");
const hnswlib_1 = require("./hnswlib");
const fs_1 = __importDefault(require("fs"));
const tar_1 = __importDefault(require("tar"));
const path_1 = __importDefault(require("path"));
const axios_1 = __importDefault(require("axios"));
function uploadOrUpdateIndexFile(fileUrl, options) {
    return __awaiter(this, void 0, void 0, function* () {
        // checking file existence of fileUrl on local
        if (!(yield fs_1.default.promises.access(fileUrl).then(() => true).catch(() => false))) {
            throw new Error("File not found");
        }
        // creating file readstream
        let fileStream = fs_1.default.createReadStream(fileUrl);
        let contentLength = (yield fs_1.default.promises.stat(fileUrl)).size;
        // uploading using axios
        const res = yield axios_1.default.post(options.uploadUrl, fileStream, {
            headers: {
                "Content-Type": "application/octet-stream",
                "Content-Length": contentLength,
            },
            onUploadProgress: (progressEvent) => {
                if (options.onProgress) {
                    options.onProgress(progressEvent);
                }
            }
        });
        if (res.status !== 200) {
            throw new Error("Upload failed");
        }
    });
}
exports.uploadOrUpdateIndexFile = uploadOrUpdateIndexFile;
const upsertIndex = (lib, options) => __awaiter(void 0, void 0, void 0, function* () {
    const { accessKey } = options;
    try {
        const uploadUrlResp = yield (0, lib_1.createUploadFileOperationUrl)(Object.assign({}, options));
        const uuidOfNamespace = `${uploadUrlResp.uuid}`;
        const folderPath = '/tmp/' + uuidOfNamespace + '.hnsw';
        const tarPath = '/tmp/' + uuidOfNamespace + '.tar.gz';
        console.log("creating index:", uuidOfNamespace, accessKey, folderPath, tarPath);
        yield lib.save(folderPath);
        // compressing using gzip
        const tarStream = tar_1.default.create({
            cwd: path_1.default.dirname(folderPath),
            gzip: true
        }, [path_1.default.basename(folderPath)]);
        const stream = tarStream
            .pipe(fs_1.default.createWriteStream(tarPath));
        let promise = new Promise((resolve, reject) => {
            stream.on('finish', () => {
                resolve(uuidOfNamespace);
            });
            stream.on('error', (err) => {
                reject(err);
            });
            stream.on('finish', () => {
            });
        });
        yield promise;
        yield fs_1.default.promises.rm(folderPath, {
            recursive: true
        });
        yield uploadOrUpdateIndexFile(tarPath, Object.assign({ uploadUrl: uploadUrlResp.url }, options));
        yield fs_1.default.promises.rm(tarPath);
        return uploadUrlResp.uuid;
    }
    catch (e) {
        throw e;
    }
});
exports.upsertIndex = upsertIndex;
const getIndex = (options) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const uuidOfNamespace = `${options.uuid}`;
        const folderPath = '/tmp/' + uuidOfNamespace + '.hnsw';
        const tarPath = '/tmp/' + uuidOfNamespace + '.tar.gz';
        console.log("getting index:", options.uuid);
        const getUrlResp = yield (0, lib_1.createGetFileOperationUrl)(Object.assign({}, options));
        const url = getUrlResp.url;
        // download using axios
        const res = yield axios_1.default.get(url, {
            responseType: 'stream',
            onDownloadProgress: (progressEvent) => {
                if (options.onProgress) {
                    options.onProgress(progressEvent);
                }
            }
        });
        let readSteam = res.data;
        let newSteam = readSteam.pipe(tar_1.default.extract({
            cwd: path_1.default.dirname(folderPath)
        }));
        let promise = new Promise((resolve, reject) => {
            newSteam.on('finish', () => {
                resolve(uuidOfNamespace);
            });
            newSteam.on('error', (err) => {
                reject(err);
            });
            newSteam.on('finish', () => {
            });
        });
        yield promise;
        const lib = yield hnswlib_1.CloseVectorHNSWNode.load(folderPath, options.embeddings);
        yield fs_1.default.promises.rm(folderPath, {
            recursive: true
        });
        return lib;
    }
    catch (e) {
        throw e;
    }
});
exports.getIndex = getIndex;
//# sourceMappingURL=io.js.map