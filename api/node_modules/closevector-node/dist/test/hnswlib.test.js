"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const hnswlib_1 = require("../src/hnswlib");
const fake_1 = require("closevector-common/src/fake");
(0, vitest_1.describe)('CloseVectorHNSWNode', () => {
    (0, vitest_1.it)('Test HNSWLib.fromTexts + addVectors', () => __awaiter(void 0, void 0, void 0, function* () {
        const vectorStore = yield hnswlib_1.CloseVectorHNSWNode.fromTexts(['Hello world'], [{ id: 2 }], new fake_1.FakeEmbeddings());
        (0, vitest_1.expect)(vectorStore.index.getMaxElements()).toBe(1);
        (0, vitest_1.expect)(vectorStore.index.getCurrentCount()).toBe(1);
        yield vectorStore.addVectors([
            [0, 1, 0, 0],
            [1, 0, 0, 0],
            [0.5, 0.5, 0.5, 0.5],
        ], [
            {
                pageContent: 'hello bye',
                metadata: { id: 5 },
            },
            {
                pageContent: 'hello worlddwkldnsk',
                metadata: { id: 4 },
            },
            {
                pageContent: 'hello you',
                metadata: { id: 6 },
            },
        ]);
        (0, vitest_1.expect)(vectorStore.index.getMaxElements()).toBe(4);
        const resultTwo = yield vectorStore.similaritySearchVectorWithScore([1, 0, 0, 0], 3);
        const resultTwoMetadatas = resultTwo.map(([{ metadata }]) => metadata);
        (0, vitest_1.expect)(resultTwoMetadatas).toEqual([{ id: 4 }, { id: 6 }, { id: 2 }]);
    }));
    (0, vitest_1.it)('Test HNSWLib metadata filtering', () => __awaiter(void 0, void 0, void 0, function* () {
        const pageContent = 'Hello world';
        const vectorStore = yield hnswlib_1.CloseVectorHNSWNode.fromTexts([pageContent, pageContent, pageContent], [{ id: 2 }, { id: 3 }, { id: 4 }], new fake_1.FakeEmbeddings());
        // If the filter wasn't working, we'd get all 3 documents back
        const results = yield vectorStore.similaritySearch(pageContent, 3, (document) => document.metadata.id === 3);
        (0, vitest_1.expect)(results).toEqual([{ metadata: { id: 3 }, pageContent }]);
    }));
});
//# sourceMappingURL=hnswlib.test.js.map