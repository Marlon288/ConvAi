import { CloseVectorEmbeddings } from "./embeddings"; 
import { CloseVectorDocument } from "./document";

export type AddDocumentOptions = Record<string, any>;

export abstract class CloseVectorSaveableVectorStore {
  declare FilterType: object | string;

  embeddings: CloseVectorEmbeddings;

  constructor(embeddings: CloseVectorEmbeddings) {
    this.embeddings = embeddings;
  }

  abstract save(directory: string): Promise<void>;

  static load(
    _directory: string,
    _embeddings: CloseVectorEmbeddings
  ): Promise<CloseVectorSaveableVectorStore> {
    throw new Error("Not implemented");
  }

  abstract addVectors(
    vectors: number[][],
    documents: CloseVectorDocument[],
    options?: AddDocumentOptions
  ): Promise<string[] | void>;

  abstract addDocuments(
    documents: CloseVectorDocument[],
    options?: AddDocumentOptions
  ): Promise<string[] | void>;

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  async delete(_params?: Record<string, any>): Promise<void> {
    throw new Error("Not implemented.");
  }

  abstract similaritySearchVectorWithScore(
    query: number[],
    k: number,
    filter?: this["FilterType"]
  ): Promise<[CloseVectorDocument, number][]>;

  async similaritySearch(
    query: string,
    k = 4,
    filter: this["FilterType"] | undefined = undefined
  ): Promise<CloseVectorDocument[]> {
    const results = await this.similaritySearchVectorWithScore(
      await this.embeddings.embedQuery(query),
      k,
      filter
    );

    return results.map((result) => result[0]);
  }

  async similaritySearchWithScore(
    query: string,
    k = 4,
    filter: this["FilterType"] | undefined = undefined
  ): Promise<[CloseVectorDocument, number][]> {
    return this.similaritySearchVectorWithScore(
      await this.embeddings.embedQuery(query),
      k,
      filter
    );
  }
}